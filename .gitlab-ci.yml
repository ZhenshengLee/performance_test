stages:
  - build
  - test
  - deploy

build_cross_image:
  stage: build
  image: docker
  services:
    - docker:dind
  script:
    - '
      docker build
          --build-arg PERFORMANCE_TEST_DOCKER_ARCH=arm64v8
          --build-arg PERFORMANCE_TEST_TARGET_ARCH=aarch64
          -t performance_test_cross
          -f tools/Dockerimage.crossbuild
          .
      '
    - '
      docker run -t -v `pwd`:`pwd` -w `pwd`
          --rm performance_test_cross
          sh -c "colcon build --merge-install --cmake-args -DCMAKE_TOOLCHAIN_FILE=`pwd`/tools/toolchain.cmake -DBUILD_TESTING=OFF"
      '

build_cyclonedds:
  stage: build
  image: osrf/ros:galactic-desktop
  script:
    - '
      colcon build
          --install-base /opt/performance_test
          --merge-install
          --cmake-args
            -DCMAKE_BUILD_TYPE=Release
            -DPERFORMANCE_TEST_CYCLONEDDS_ENABLED=ON
      '
    - cp LICENSE /opt/performance_test
    - tar cfz opt.tar.gz /opt/performance_test
  artifacts:
    expire_in: 1 day
    when: always
    paths:
      - log
      - build
      - opt.tar.gz

build_iceoryx:
  stage: build
  image: osrf/ros:galactic-desktop
  script:
    - '
      colcon build
          --install-base /opt/performance_test
          --merge-install
          --cmake-args
            -DCMAKE_BUILD_TYPE=Release
            -DPERFORMANCE_TEST_ICEORYX_ENABLED=ON
          --base-path performance_test
      '
    - cp LICENSE /opt/performance_test
    - tar cfz opt.tar.gz /opt/performance_test
  artifacts:
    expire_in: 1 day
    when: always
    paths:
      - log
      - build
      - opt.tar.gz

build_opendds:
  stage: build
  image: osrf/ros:galactic-desktop
  script:
    - source /opt/ros/galactic/setup.bash
    - apt-get update
    - apt-get install -y wget
    - rosdep update
    - rosdep install --from performance_test --ignore-src -y
    - wget https://s3-us-west-2.amazonaws.com/public.apex.ai/opt-opendds-3.13.2.tar.gz
    - tar -xzf opt-opendds-3.13.2.tar.gz -C /
    - find /opt/opendds
    - cd $CI_PROJECT_DIR
    - mkdir -p /opt/performance_test
    - '
      colcon build
          --install-base /opt/performance_test
          --merge-install
          --cmake-args
            -DCMAKE_BUILD_TYPE=Release
            -DPERFORMANCE_TEST_OPENDDS_ENABLED=ON
          --base-path performance_test
      '
    - cp LICENSE /opt/performance_test
    - tar cfz opt-opendds.tar.gz /opt/opendds
    - tar cfz opt.tar.gz /opt/performance_test
  artifacts:
    expire_in: 1 day
    when: always
    paths:
    - log
    - build
    - opt-opendds.tar.gz
    - opt.tar.gz

build_fastrtps:
  stage: build
  image: osrf/ros:galactic-desktop
  script:
    - apt-get update
    - rosdep update
    - rosdep install --from performance_test --ignore-src -y
    - '
      colcon build
          --install-base /opt/performance_test
          --merge-install
          --cmake-args
            -DCMAKE_BUILD_TYPE=Release
            -DPERFORMANCE_TEST_FASTRTPS_ENABLED=ON
      '
    - cp LICENSE /opt/performance_test
    - tar cfz opt.tar.gz /opt/performance_test
  artifacts:
    expire_in: 1 day
    when: always
    paths:
      - log
      - build
      - opt.tar.gz

build_ros1:
  stage: build
  image: osrf/ros:melodic-desktop
  script:
    - source /opt/ros/melodic/setup.bash
    - apt-get update
    - apt-get install -y python3-colcon-common-extensions
    - touch performance_test/COLCON_IGNORE  # Don't build the ROS2 package
    - rm performance_test_ros1_msgs/COLCON_IGNORE  # ROS1 packages are ignored by default
    - rm performance_test_ros1_publisher/COLCON_IGNORE  # ROS1 packages are ignored by default
    - colcon build  # Should build msgs and publisher

test:
  stage: test
  image: osrf/ros:galactic-desktop
  needs:
    - build_cyclonedds
  script:
    - tar xf opt.tar.gz -C /
    - '
      colcon test
          --install-base /opt/performance_test
          --merge-install
          --base-path performance_test
      '
    - 'colcon test-result --verbose'
  artifacts:
    expire_in: 1 day
    when: always
    paths:
      - log

.smoke_test:
  stage: test
  image: osrf/ros:galactic-desktop
  script:
    - apt-get update
    - rosdep update
    - rosdep install --from performance_test --ignore-src -y
    - 'if [[ -n "${SMOKE_TEST_BEFORE_SCRIPT}" ]]; then eval "${SMOKE_TEST_BEFORE_SCRIPT}"; fi'
    - tar xzf opt.tar.gz -C /
    - source /opt/performance_test/setup.bash
    - '
      MSGS=${SMOKE_TEST_TOPICS:-Array1k};
      for MSG in ${MSGS}; do
        /opt/performance_test/lib/performance_test/perf_test
            -c ${COMMUNICATION_MEAN}
            --msg ${MSG}
            --topic test_topic
            --rate 2
            --keep_last
            --history_depth 10
            --max_runtime 15;
      done;
      '

smoke_test_fastrtps:
  extends:
    - .smoke_test
  needs:
    - build_fastrtps
  variables:
    COMMUNICATION_MEAN: FastRTPS

smoke_test_cyclonedds:
  extends:
    - .smoke_test
  needs:
    - build_cyclonedds
  variables:
    COMMUNICATION_MEAN: CycloneDDS

smoke_test_iceoryx:
  extends:
    - .smoke_test
  needs:
    - build_iceoryx
  variables:
    COMMUNICATION_MEAN: iceoryx
    SMOKE_TEST_BEFORE_SCRIPT: '
        mkdir -p /etc/iceoryx;
        printf "[general]\nversion = 1\n\n[[segment]]\n\n[[segment.mempool]]\nsize = 128\ncount = 1000\n\n[[segment.mempool]]\nsize = 1024\ncount = 1000\n\n[[segment.mempool]]\nsize = 16384\ncount = 100\n\n[[segment.mempool]]\nsize = 131072\ncount = 10" > /etc/iceoryx/roudi_config.toml;
        iox-roudi -c /etc/iceoryx/roudi_config.toml &
    '

smoke_test_opendds:
  extends:
    - .smoke_test
  needs:
    - build_opendds
  variables:
    COMMUNICATION_MEAN: OpenDDS
    SMOKE_TEST_BEFORE_SCRIPT: '
        tar xzf opt-opendds.tar.gz -C /;
    '

test_plotter:
  stage: test
  image: osrf/ros:galactic-desktop
  script:
    - cd performance_test/helper_scripts/apex_performance_plotter
    - apt-get update
    - apt-get install -y python3-pip
    - pip3 install .
    - perfplot --help

test_security_fast_dds:
  stage: test
  image: osrf/ros:galactic-desktop
  needs:
    - build_fastrtps
  script:
    - apt-get update
    - rosdep update
    - rosdep install --from performance_test --ignore-src -y
    - tar xzf opt.tar.gz -C /
    - source /opt/performance_test/setup.bash
    # Enable security
    - cd performance_test/helper_scripts
    - source security_setup.bash enable ./demo_keys
    - export RMW_IMPLEMENTATION=rmw_fastrtps_cpp
    # The below runs should fail:
    # Unexpected node names:
    - '! ros2 run performance_test perf_test -c ROS2 --msg Array1k -t Array1k --max_runtime 10 --rate 2 --keep_last --history_depth 10'
    # Unexpected msg types
    - '! ros2 run performance_test perf_test -c ROS2 --msg Struct16 -t test_topic --max_runtime 10 --rate 2 --keep_last --history_depth 10 --with_security -- --ros-args -e /performance_test'
    # This should pass (time-out)
    - 'timeout 30 ros2 run performance_test perf_test -c ROS2 --msg Array16k -t Array16k --rate 2 --keep_last --history_depth 10 --with_security -- --ros-args -e /performance_test ||
       if [ $? -eq 124 ]; then echo "OK";
       else exit 1;
       fi
      '
test_security_cyclone_dds:
  stage: test
  image: osrf/ros:galactic-desktop
  needs:
    - build_cyclonedds
  script:
    - apt-get update
    - rosdep update
    - rosdep install --from performance_test --ignore-src -y
    - tar xzf opt.tar.gz -C /
    - source /opt/performance_test/setup.bash
    # Enable security
    - cd performance_test/helper_scripts
    - source security_setup.bash enable ./demo_keys
    # The below runs should fail:
    # Unexpected node names:
    - '! ros2 run performance_test perf_test -c ROS2 --msg Array1k -t Array1k --max_runtime 10 --rate 2 --keep_last --history_depth 10'
    # Unexpected msg types
    - '! ros2 run performance_test perf_test -c ROS2 --msg Struct16 -t test_topic --max_runtime 10 --rate 2 --keep_last --history_depth 10 --with_security -- --ros-args -e /performance_test'
    # This should pass (time-out)
    - 'timeout 30 ros2 run performance_test perf_test -c ROS2 --msg Array16k -t Array16k --rate 2 --keep_last --history_depth 10 --with_security -- --ros-args -e /performance_test ||
       if [ $? -eq 124 ]; then echo "OK";
       else exit 1;
       fi
      '

volume:
  stage: deploy
  image: docker
  services:
    - docker:dind
  needs:
    - build_cyclonedds
  before_script:
    - ''
  script:
    - 'echo -e "*\n!opt.tar.gz" > .dockerignore'
    - |
      cat >Dockerfile <<EOF
      FROM alpine
      ADD opt.tar.gz /
      VOLUME /opt/performance_test
      CMD ["/bin/sh", "-c", "trap 'exit 147' TERM; tail -f /dev/null & wait ${!}"]
      EOF
    - '
      docker build
          --label ade_image_commit_sha="$CI_COMMIT_SHA"
          --label ade_image_commit_tag="$CI_COMMIT_TAG"
          -t image .
      '
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker tag image $CI_REGISTRY_IMAGE:commit-$CI_COMMIT_SHA
    - docker tag image $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    - docker push $CI_REGISTRY_IMAGE:commit-$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
